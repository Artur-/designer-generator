package org.vaadin.artur.designer.generator;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.jboss.forge.roaster.Roaster;
import org.jboss.forge.roaster.model.source.FieldSource;
import org.jboss.forge.roaster.model.source.JavaClassSource;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.jsoup.select.Selector;

import com.vaadin.shared.util.SharedUtil;

public class GenerateJava {
    public static void main(String[] args) throws IOException {
        String htmlFile = args[0];
        boolean generateGetters = true;

        // TODO out package and class from HTML location
        String outPackage = "org.vaadin.artur.generated";
        String outClass = "MyDesign";
        // TODO write output
        // String outFile = outClass + ".java";

        Document design = Jsoup.parse(new File(htmlFile), "UTF-8");
        Map<String, String> packageMapping = getPackageMapping(design);
        Elements idElements = Selector.select("[_id]", design.body());
        String superClass = tagToClass(design.body().child(0).tagName(),
                packageMapping);

        final JavaClassSource javaClass = Roaster.create(JavaClassSource.class);
        javaClass.setPackage(outPackage).setName(outClass);
        javaClass.setSuperType(superClass);
        javaClass.addAnnotation("com.vaadin.annotations.DesignRoot");
        javaClass.addAnnotation("com.vaadin.annotations.AutoGenerated");
        // @SuppressWarnings("serial")

        Iterator<Element> i = idElements.iterator();
        while (i.hasNext()) {

            Element idElement = i.next();
            String tag = idElement.tagName();
            String type = tagToClass(tag, packageMapping);
            String propertyId = idElement.attr("data-property-id");
            FieldSource<JavaClassSource> field = javaClass.addField();
            String fieldName = idElement.attr("_id");
            field.setName(fieldName).setType(type).setProtected();
            if (propertyId != null && !propertyId.isEmpty()) {
                field.addAnnotation("com.vaadin.annotations.PropertyId")
                        .setStringValue(propertyId);
            }

            if (generateGetters) {
                javaClass.addMethod()
                        .setName("get" + SharedUtil.capitalize(fieldName))
                        .setBody("return " + fieldName + ";").setPublic();
            }

        }
        javaClass.getJavaDoc().setFullText("!! DO NOT EDIT THIS FILE !!\n"
                + "\n"
                + "This class is generated by Vaadin Designer and will be overwritten.\n"
                + "\n"
                + "Please make a subclass with logic and additional interfaces as needed, e.g class LoginView extends LoginDesign implements View { }");
        javaClass.addMethod().setConstructor(true).setPublic()
                .setBody("Design.read(this);");

        // @PropertyId("customer.firstName")
        //
        System.out.println(javaClass);

    }

    private static Map<String, String> getPackageMapping(Document design) {
        // <meta name="package-mapping"
        // content="com_vaadin_template_orders_ui_view_orders:com.vaadin.template.orders.ui.view.orders">
        // <meta name="package-mapping"
        // content="com_vaadin_template_orders_ui_components:com.vaadin.template.orders.ui.components">
        Map<String, String> map = new HashMap<String, String>();

        Elements mappings = Selector.select("[name=package-mapping]",
                design.head());
        Iterator<Element> i = mappings.iterator();
        while (i.hasNext()) {
            Element mapping = i.next();
            String[] parts = mapping.attr("content").split(":", 2);
            map.put(parts[0], parts[1]);
        }

        return map;
    }

    private static String tagToClass(String tag,
            Map<String, String> packageMapping) {
        String dashClassName;
        String pkgName;
        if (tag.startsWith("vaadin-")) {
            pkgName = "com.vaadin.ui";
            dashClassName = tag.substring("vaadin-".length());
        } else if (tag.startsWith("v-")) {
            pkgName = "com.vaadin.ui";
            dashClassName = tag.substring("v-".length());
        } else {
            int dashIndex = tag.indexOf("-");
            String prefix = tag.substring(0, dashIndex);
            pkgName = packageMapping.get(prefix);
            dashClassName = tag.substring(dashIndex + 1);
        }
        String className = SharedUtil
                .capitalize(SharedUtil.dashSeparatedToCamelCase(dashClassName));

        return pkgName + "." + className;
    }
}
