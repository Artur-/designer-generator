package org.vaadin.artur.designer.generator;

import java.io.File;
import java.io.IOException;
import java.util.Iterator;

import org.jboss.forge.roaster.Roaster;
import org.jboss.forge.roaster.model.source.FieldSource;
import org.jboss.forge.roaster.model.source.JavaClassSource;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.jsoup.select.Selector;

public class CompanionFileGenerator extends DesignFileGenerator {

    public CompanionFileGenerator(Document design) {
        super(design);
    }

    public void generate(String outputJavaPkg, String outputJavaClass,
            File outputJavaFileBaseFolder) throws IOException {
        Boolean generateGetters = false;
        String forceSuperClass = null;

        String superClass;
        generateGetters = getDesignPropertyBoolean("GENERATE_GETTERS");
        if (generateGetters == null) {
            generateGetters = false;
        }
        forceSuperClass = getDesignPropertyString("SUPERCLASS");
        if (forceSuperClass != null) {
            superClass = forceSuperClass;
        } else {
            superClass = tagToClass(getRootDesignElement());
        }

        final JavaClassSource javaClass = Roaster.create(JavaClassSource.class);
        javaClass.setPackage(outputJavaPkg).setName(outputJavaClass);
        javaClass.setSuperType(superClass);
        javaClass.addAnnotation("com.vaadin.annotations.DesignRoot");
        javaClass.addAnnotation("com.vaadin.annotations.AutoGenerated");

        Elements idElements = Selector.select("[_id]", getBody());
        Iterator<Element> i = idElements.iterator();
        while (i.hasNext()) {
            Element idElement = i.next();
            String type = tagToClass(idElement);
            String propertyId = idElement.attr("data-property-id");
            FieldSource<JavaClassSource> field = javaClass.addField();
            String fieldName = idElement.attr("_id");
            field.setName(fieldName).setType(type).setProtected();
            if (propertyId != null && !propertyId.isEmpty()) {
                field.addAnnotation("com.vaadin.annotations.PropertyId")
                        .setStringValue(propertyId);
            }

            if (generateGetters) {
                javaClass.addMethod()
                        .setName("get" + Util.capitalize(fieldName))
                        .setBody("return " + fieldName + ";").setPublic()
                        .setReturnType(type);
            }

        }
        javaClass.getJavaDoc().setFullText("!! DO NOT EDIT THIS FILE !!\n"
                + "\n"
                + "This class is generated by Vaadin Designer and will be overwritten.\n"
                + "\n"
                + "Please make a subclass with logic and additional interfaces as needed, e.g class LoginView extends LoginDesign implements View { }");
        javaClass.addMethod().setConstructor(true).setPublic()
                .setBody("Design.read(this);");
        javaClass.addImport("com.vaadin.ui.declarative.Design");

        writeFile(outputJavaFileBaseFolder, javaClass);

    }

}
